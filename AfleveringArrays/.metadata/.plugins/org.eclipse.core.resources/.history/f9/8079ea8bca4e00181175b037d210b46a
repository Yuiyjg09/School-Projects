package guifx;

import java.time.LocalDate;
import java.util.ArrayList;

import application.model.*;
import application.service.Service;
import javafx.scene.Scene;
import javafx.beans.value.ChangeListener;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.layout.GridPane;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import storage.Storage;

public class UdlejningWindow extends Stage {
	private Kunde kunde;
	
	public UdlejningWindow(String title, Kunde kunde) {
		this.initStyle(StageStyle.UTILITY);
        this.initModality(Modality.APPLICATION_MODAL);
        this.setResizable(false);
        
        this.kunde = kunde;
        
        this.setTitle(title);
        GridPane pane = new GridPane();
        this.initContent(pane);
        
        Scene scene = new Scene(pane);
        this.setScene(scene);
	}

	private ComboBox<Bil> cbBiler;
	private ComboBox<BilKatagori> cbKatagorier;
	private ListView<Bil> lvwBiler;
	private DatePicker dpTil, dpUd;
	
	private void initContent(GridPane pane) {
		
		Label lblUd = new Label("Udleveringsdato:");
		pane.add(lblUd, 0, 0);
		
		dpUd = new DatePicker();
		pane.add(dpUd, 0, 1);
		dpUd.setValue(LocalDate.now());
		
		Label lblTilbage = new Label("Tilbageleveringsdato:");
		pane.add(lblTilbage, 0, 2);
		
		dpTil = new DatePicker();
		pane.add(dpTil, 0, 3);
		dpTil.setValue(LocalDate.now().plusDays(1));
		
		Label lblCbK = new Label("Vælg Katagori:");
		pane.add(lblCbK, 2, 0);
		
		cbKatagorier = new ComboBox<BilKatagori>();
		pane.add(cbKatagorier, 2, 1);
		cbKatagorier.getItems().setAll(Storage.getKatagorier());
		cbKatagorier.setOnAction(event -> this.selectedKatagoriChanged());
		
		Label lblCbB = new Label("Vælg Bil:");
		pane.add(lblCbB, 2, 2);
		
		cbBiler = new ComboBox<Bil>();
		pane.add(cbBiler, 2, 3);
		
		Button btnTil = new Button("Tilføj Bil");
		pane.add(btnTil, 3, 3);
		btnTil.setOnAction(event -> this.addBilAction());
		
		Label lblBiler = new Label("Biler Valgt:");
		pane.add(lblBiler, 2, 4);
		
		lvwBiler = new ListView<Bil>();
		pane.add(lvwBiler, 2, 5, 1, 3);
		lvwBiler.setPrefHeight(200);
		lvwBiler.setPrefWidth(200);
		
		ChangeListener<Bil> listener = (ov, oldBil, newBil) -> this.selectedBilChanged();
		lvwBiler.getSelectionModel().selectedItemProperty().addListener(listener);
		
		Button btnFjern = new Button("Fjern Bil");
		pane.add(btnFjern, 2, 9);
		btnFjern.setOnAction(event -> this.removeBilAction());
		
		Button btnOpret = new Button("Opret Udlejningskontrakt");
		pane.add(btnOpret, 0, 10);
		btnOpret.setOnAction(event -> this.createUdlejningAction());
		
		Button btnCancel = new Button("Cancel");
		pane.add(btnCancel, 1, 10);
		btnCancel.setOnAction(event -> this.cancelAction());
	}
	
	private void cancelAction() {
		this.hide();
	}
	
	private void selectedKatagoriChanged() {
		if(!cbKatagorier.getSelectionModel().isEmpty()) {
			cbBiler.getItems().setAll(cbKatagorier.getSelectionModel().getSelectedItem().getBiler());
		} else {
			Alert alert = new Alert(null);
			alert.setAlertType(AlertType.INFORMATION);
			alert.setHeaderText("Ingen Katagori valgt");
			alert.setContentText("Vælg Katagori");
			alert.showAndWait();
		}
	}
	
	private void selectedBilChanged() {}
	
	private void addBilAction() {
		if(!cbBiler.getItems().isEmpty()) {
			cbBiler.getSelectionModel().getSelectedItem().setTilstand(Tilstand.UDLEJET);
			lvwBiler.getItems().add(cbBiler.getSelectionModel().getSelectedItem());
			cbBiler.getItems().remove(cbBiler.getSelectionModel().getSelectedItem());
		} else {
			Alert alert = new Alert(null);
			alert.setAlertType(AlertType.INFORMATION);
			alert.setHeaderText("Ingen Bil valgt");
			alert.setContentText("Vælg Bil");
			alert.showAndWait();
		}
	}
	
	private void removeBilAction() {
		if(!lvwBiler.getItems().isEmpty()) {
			lvwBiler.getSelectionModel().getSelectedItem().setTilstand(Tilstand.KOEBT);
			cbBiler.getItems().add(lvwBiler.getSelectionModel().getSelectedItem());
			lvwBiler.getItems().remove(lvwBiler.getSelectionModel().getSelectedItem());
			
		} else {
			Alert alert = new Alert(null);
			alert.setAlertType(AlertType.INFORMATION);
			alert.setHeaderText("Ingen Bil valgt");
			alert.setContentText("Vælg Bil");
			alert.showAndWait();
		}
	}
	
	private void createUdlejningAction() {
		LocalDate ldUd = dpUd.getValue();
		LocalDate ldTil = dpTil.getValue();
		
		if(!lvwBiler.getItems().isEmpty() && ldUd.isBefore(ldTil)) {
			ArrayList<Bil> biler = (ArrayList<Bil>) lvwBiler.getItems();
			Service.createUdlejning(kunde, biler, ldUd, ldTil);
			this.hide();
		} else if(lvwBiler.getItems().isEmpty()) {
			Alert alert = new Alert(null);
			alert.setAlertType(AlertType.INFORMATION);
			alert.setHeaderText("Ingen Bil valgt");
			alert.setContentText("Vælg Bil");
			alert.showAndWait();
		} else {
			Alert alert = new Alert(null);
			alert.setAlertType(AlertType.INFORMATION);
			alert.setHeaderText("Fejl");
			alert.setContentText("Tilbageleveringsdatoen er før Udlejningsdatoen");
			alert.showAndWait();
		}
	}
}
