package guifx;

import java.util.Optional;

import application.model.*;
import application.service.Service;
import javafx.beans.value.ChangeListener;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.geometry.VPos;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

public class KonferencePane extends GridPane {
	private ListView<Konference> lvwKonferencer;
	private ListView<Udflugt> lvwUdflugter;
	private TextArea txaDeltagere;
	private TextField txfName, txfAdresse, txfPris;
	
	public KonferencePane() {
		this.setPadding(new Insets(20));
        this.setHgap(20);
        this.setVgap(10);
        this.setGridLinesVisible(false);
        
        Label lblKon = new Label("Konferencer");
        this.add(lblKon, 0, 0);
        
        lvwKonferencer= new ListView<>();
        this.add(lvwKonferencer, 0, 1, 1, 3);
        lvwKonferencer.setPrefWidth(200);
        lvwKonferencer.setPrefHeight(200);
        lvwKonferencer.getItems().setAll(Service.getKonferencer());
        
        ChangeListener<Konference> listener =
            (ov, oldCompny, newCompany) -> this.selectedKonferenceChanged();
        lvwKonferencer.getSelectionModel().selectedItemProperty().addListener(listener);
                   
        Label lblName = new Label("Navn:");
        this.add(lblName, 1, 1);

        txfName = new TextField();
        this.add(txfName, 2, 1);
        txfName.setEditable(false);
        
        Label lblAdresse = new Label("Adresse:");
        this.add(lblAdresse, 1, 2);

        txfAdresse = new TextField();
        this.add(txfAdresse, 2, 2);
        txfAdresse.setEditable(false);
        
        Label lblPris = new Label("Pris:");
        this.add(lblPris, 1, 3);

        txfPris = new TextField();
        this.add(txfPris, 2, 3);
        txfPris.setEditable(false);
        
        Label lblDeltagere = new Label("Deltagere:");
        this.add(lblDeltagere, 1, 4);
        GridPane.setValignment(lblDeltagere, VPos.BASELINE);
        lblDeltagere.setPadding(new Insets(4, 0, 4, 0));

        txaDeltagere = new TextArea();
        this.add(txaDeltagere, 2, 4);
        txaDeltagere.setPrefWidth(200);
        txaDeltagere.setPrefHeight(100);
        txaDeltagere.setEditable(false);
        
        if (lvwKonferencer.getItems().size() > 0) {
        	lvwKonferencer.getSelectionModel().select(0);
        }
        
        Label lblUdflugter = new Label("Udflugter:");
        this.add(lblUdflugter, 1, 5);
        GridPane.setValignment(lblUdflugter, VPos.BASELINE);
        lblUdflugter.setPadding(new Insets(4, 0, 4, 0));
        
        lvwUdflugter = new ListView<>();
        this.add(lvwUdflugter, 2, 5, 1, 3);
        lvwUdflugter.setPrefWidth(200);
        lvwUdflugter.setPrefHeight(200);
        Konference kon = lvwKonferencer.getSelectionModel().getSelectedItem();
        if(kon != null) {
        lvwUdflugter.getItems().setAll(kon.getUdflugter());
        }
        
        ChangeListener<Udflugt> listener2 =
                (ov, oldCompny, newCompany) -> this.selectedKonferenceChanged();
                lvwUdflugter.getSelectionModel().selectedItemProperty().addListener(listener2);
        
        HBox hbxButtons = new HBox(40);
        this.add(hbxButtons, 0, 9, 3, 1);
        hbxButtons.setPadding(new Insets(10, 0, 0, 0));
        hbxButtons.setAlignment(Pos.BASELINE_CENTER);
                
        Button btnCreate = new Button("Create Konference");
        hbxButtons.getChildren().add(btnCreate);
        btnCreate.setOnAction(event -> this.createAction());

        Button btnUpdate = new Button("Update Konference");
        hbxButtons.getChildren().add(btnUpdate);
        btnUpdate.setOnAction(event -> this.updateAction());

        Button btnDelete = new Button("Delete Konference");
        hbxButtons.getChildren().add(btnDelete);
        btnDelete.setOnAction(event -> this.deleteAction());
        
        Button btnUdflugt = new Button("Opret Udflugt");
        hbxButtons.getChildren().add(btnUdflugt);
        btnUdflugt.setOnAction(event -> this.opretUdflugt());
  
	}
	
	private void createAction() {
		KonferenceWindow dia = new KonferenceWindow("Create Konference");
        dia.showAndWait();

        // Wait for the modal dialog to close

        lvwKonferencer.getItems().setAll(Service.getKonferencer());
        int index = lvwKonferencer.getItems().size() - 1;
        lvwKonferencer.getSelectionModel().select(index);
    }

    private void updateAction() {
    	Konference company = lvwKonferencer.getSelectionModel().getSelectedItem();
        if (company == null)
            return;

        KonferenceWindow dia = new KonferenceWindow("Update Company", company);
        dia.showAndWait();

        // Wait for the modal dialog to close

        int selectIndex = lvwKonferencer.getSelectionModel().getSelectedIndex();
        lvwKonferencer.getItems().setAll(Service.getKonferencer());
        lvwKonferencer.getSelectionModel().select(selectIndex);
    }

    private void deleteAction() {
    	Konference company = lvwKonferencer.getSelectionModel().getSelectedItem();
        if (company == null)
            return;

        if (company.getDeltagere().size() == 0) {
            Stage owner = (Stage) this.getScene().getWindow();
            Alert alert = new Alert(AlertType.CONFIRMATION);
            alert.setTitle("Delete Company");
            alert.initOwner(owner);
            alert.setHeaderText("Are you sure?");

            // Wait for the modal dialog to close
            Optional<ButtonType> result = alert.showAndWait();
            if (result.isPresent() && result.get() == ButtonType.OK) {
                Service.deleteKonference(company);
                lvwKonferencer.getItems().setAll(Service.getKonferencer());
                this.updateControls();
            }
        } else {
            Stage owner = (Stage) this.getScene().getWindow();
            Alert alert = new Alert(AlertType.ERROR, "Slet Konference");
            alert.setHeaderText("Kan ikke slette en Konference med tilmeldte deltagere");
            alert.initOwner(owner);
            alert.showAndWait();
        }
    }
    
    private void opretUdflugt() {
    	Konference konference = lvwKonferencer.getSelectionModel().getSelectedItem();
    	if (konference == null) {
	        return;
	    }
    	
    	UdflugtWindow dia = new UdflugtWindow("Opret Udflugt", konference);
    	dia.showAndWait();
    	
    	lvwUdflugter.getItems().setAll(lvwKonferencer.getSelectionModel().getSelectedItem().getUdflugter());
    }
	
	
	private void selectedKonferenceChanged() {
		this.updateControls();
	}
	
	public void updateControls() {
		Konference konference = lvwKonferencer.getSelectionModel().getSelectedItem();
		if(konference != null) {
			txfName.setText(konference.getNavn());
			txfAdresse.setText(konference.getAdresse());
			txfPris.setText(konference.getPris() + "");
			StringBuilder sb = new StringBuilder();
            for (Deltager emp : konference.getDeltagere()) {
                sb.append(emp + "\n");
            }
            txaDeltagere.setText(sb.toString());
		} else {
			txfName.clear();
			txfAdresse.clear();
			txfPris.clear();
			txaDeltagere.clear();
		}
	}
}
